function main(argv){      //app.scriptPreferences.enableRedraw = true     myPrs = new Window('palette', 'Processing ImageReport');     myPrs.orientation = 'column';     myPrs.alignment = 'right';     myPrs.ProcessHead  = myPrs.add('statictext',[40,0,600,25], "Processing...");     myPrs.Process = myPrs.add("progressbar",[40,40,600,65], 1, 100);     myPrs.Label = myPrs.add('statictext', [40,40,600,95], "Getting Links...");     myPrs.Process.value = 0;	var myFiles;	//app.scriptPreferences.userInteractionLevel = UserInteractionLevels.neverInteract;        //alert(argv[0]);        if (argv.length <= 0) {	myFiles = File.openDialog("Select the Indd files...", "", true);    } else {        myFiles = argv;        }        try {  var filename = myFiles[0].toString(); }        catch(myErr) {            return -1;            }    var title = filename.replace(/\%20/g, " ");        var myLinks = [];        if ((myLinks = getLinksFromFiles(myFiles)) == -2) {            return;         } else {        myPrs.show();        ProgressBar(100);        myPrs.Label.text="Setting grid & placing files. this may take a while..."        $.sleep(200);        myDisplayDialog(myLinks);         createTitle("GRJ Studio - Image Useage Report", title);        myPrs.hide();        myPrs.show();        myPrs.Label.text="All Done!"        //alert("Your ImageReport is complete. \n You can now print it or export to your job folder.");       }             return 0;}    function ProgressBar(v) {    myPrs.ProcessHead.text = "Processing...";    myPrs.Process.value = v;    myPrs.show();}function getLinksFromFiles(files) {   var myarr = [];   var step = Math.round(100 / files.length)   for (var i = 0; i <= files.length-1; i++) {        ProgressBar(step*i);       try {        app.open(files[i]);        } catch(myErr ){                  alert("unable to access file ... \n Does another user have this file open?");                   return -2;            }            var links = app.activeDocument.links;             for (var j = 0; j <= links.length-1; j++) {                var lk = links[j];                var lkPath=lk.filePath;                var myFileType = lkPath.split(".")[1];                if (myFileType == "JPG" || myFileType == "jpg" || myFileType == "jpeg" || myFileType == "tiff" || myFileType == "TIFF" || myFileType == "BMP" || myFileType == "bmp") {                    if (lkPath.indexOf("LOGOS & GRAPHICS") < 0) {                        myarr.push(lkPath);                        }                }        }       app.activeDocument.close();    }    ProgressBar (100);   return myarr}function myDisplayDialog(myFiles, PB){     //PROGRESS BAR SOULD BE HERE	var myNumberOfRows = 5; 	var myNumberOfColumns = 5; 	var myRemoveEmptyFrames = true;	var myFitProportional = true;	var myFitCenterContent = true;	var myFitFrameToContent = true;	var myHorizontalOffset = 6;	var myVerticalOffset = 6;	var myMakeLabels = true;	var myLabelType = 2;	var myLabelHeight = 60;	var myLabelOffset = 0;	var myLabelStyle = "Labels";	var myLayerName = "Layer 1";	myMakeImageCatalog(myFiles, myNumberOfRows, myNumberOfColumns, myRemoveEmptyFrames, myFitProportional, myFitCenterContent, myFitFrameToContent, myHorizontalOffset, myVerticalOffset, myMakeLabels, myLabelType, myLabelHeight, myLabelOffset, myLabelStyle,  myLayerName); }function myGetParagraphStyleNames(myDocument){	var myStyleNames = new Array;	var myAddLabelStyle = true;	for(var myCounter = 0; myCounter < myDocument.paragraphStyles.length; myCounter++){		myStyleNames.push(myDocument.paragraphStyles.item(myCounter).name);		if (myDocument.paragraphStyles.item(myCounter).name == "Labels"){			myAddLabelStyle = false;		}	}	if(myAddLabelStyle == true){		myStyleNames.push("Labels");	}	return myStyleNames;}function myMakeImageCatalog(myFiles, myNumberOfRows, myNumberOfColumns, myRemoveEmptyFrames, myFitProportional, myFitCenterContent, myFitFrameToContent, myHorizontalOffset, myVerticalOffset, myMakeLabels, myLabelType, myLabelHeight, myLabelOffset, myLabelStyle,  myLayerName){	var myPage, myFile, myCounter, myX1, myY1, myX2, myY2, myRectangle, myLabelStyle, myLabelLayer; 	var myParagraphStyle, myError;	var myFramesPerPage = myNumberOfRows * myNumberOfColumns;  	var myDocument = app.documents.add(); 	myDocument.viewPreferences.horizontalMeasurementUnits = MeasurementUnits.points; 	myDocument.viewPreferences.verticalMeasurementUnits = MeasurementUnits.points; 	var myDocumentPreferences = myDocument.documentPreferences;  	var myNumberOfFrames = (myFiles.length+5); 	var myNumberOfPages = Math.round((myNumberOfFrames+5) / myFramesPerPage); 	if ((myNumberOfPages * myFramesPerPage) < myNumberOfFrames){  		myNumberOfPages++; 	}		try{			myLabelLayer = myDocument.layers.item(myLayerName);			myLabelLayer.name;		}		catch (myError){			myLabelLayer = myDocument.layers.add({name:myLayerName}); 		}		try{			myParagraphStyle = myDocument.paragraphStyles.item(myLabelStyle);			myParagraphStyle.name;		}		catch(myError){			myDocument.paragraphStyles.add({name:myLabelStyle});		}		myDocumentPreferences.pagesPerDocument = myNumberOfPages;  	myDocumentPreferences.facingPages = false;  	var myPage = myDocument.pages.item(0);  	var myMarginPreferences = myPage.marginPreferences; 	var myLeftMargin = myMarginPreferences.left;  	var myTopMargin = myMarginPreferences.top;  	var myRightMargin = myMarginPreferences.right;  	var myBottomMargin = myMarginPreferences.bottom;  	var myLiveWidth = (myDocumentPreferences.pageWidth - (myLeftMargin + myRightMargin)) + myHorizontalOffset	var myLiveHeight = myDocumentPreferences.pageHeight - (myTopMargin + myBottomMargin)	var myColumnWidth = myLiveWidth / myNumberOfColumns	var myFrameWidth = myColumnWidth - myHorizontalOffset	var myRowHeight = (myLiveHeight / myNumberOfRows)	var myFrameHeight = myRowHeight - myVerticalOffset	var myPages = myDocument.pages;    	for (myCounter = myDocument.pages.length-1; myCounter >= 0; myCounter--){  		myPage = myPages.item(myCounter); 		for (var myRowCounter = myNumberOfRows; myRowCounter >= 1; myRowCounter--){  			myY1 = myTopMargin + (myRowHeight * (myRowCounter-1));			myY2 = myY1 + myFrameHeight;			for (var myColumnCounter = myNumberOfColumns; myColumnCounter >= 1; myColumnCounter--){  				myX1 = myLeftMargin + (myColumnWidth * (myColumnCounter-1));				myX2 = myX1 + myFrameWidth;				myRectangle = myPage.rectangles.add(myDocument.layers.item(-1), undefined, undefined, {geometricBounds:[myY1, myX1, myY2, myX2], strokeWeight:0, strokeColor:myDocument.swatches.item("None")});  			} 		}	}        //PROGRESS BAR RESET - PLACING IMAGES NOW     //app.scriptPreferences.enableRedraw = true    	for (myCounter = 5; myCounter < (myNumberOfFrames-5); myCounter++){                   //Function1();		myFile = myFiles[myCounter];  		myRectangle = myDocument.rectangles.item(myCounter);         try {		myRectangle.place(File(myFile));         } catch(myError) {             alert("A file was not found");             }		myRectangle.label = myFile;		if(myFitProportional){			myRectangle.fit(FitOptions.proportionally); 		}		if(myFitCenterContent){			myRectangle.fit(FitOptions.centerContent); 		}		if(myFitFrameToContent){			myRectangle.fit(FitOptions.frameToContent); 		}		if(myMakeLabels == true){ 			myAddLabel(myRectangle, myLabelType, myLabelHeight, myLabelOffset, myLabelStyle, myLayerName);		} 	}		for (var myCounter = myDocument.rectangles.length-1; myCounter >= 0;myCounter--){  			if (myDocument.rectangles.item(myCounter).contentType == ContentType.unassigned){ 				myDocument.rectangles.item(myCounter).remove(); 			}  	}}function myAddLabel(myFrame, myLabelType, myLabelHeight, myLabelOffset, myLabelStyleName, myLayerName){	var myDocument = app.documents.item(0);	var myLabel;	var myLabelStyle = myDocument.paragraphStyles.item(myLabelStyleName);	var myLabelLayer = myDocument.layers.item(myLayerName);	var myLink =myFrame.graphics.item(0).itemLink;	myLabel = myLink.name;	var myX1 = myFrame.geometricBounds[1]; 	var myY1 = myFrame.geometricBounds[2] + myLabelOffset; 	var myX2 = myFrame.geometricBounds[3]; 	var myY2 = myY1 + myLabelHeight;	var myTextFrame = myFrame.parent.textFrames.add(myLabelLayer, undefined, undefined,{geometricBounds:[myY1, myX1, myY2, myX2], contents:myLabel}); 	myTextFrame.textFramePreferences.firstBaselineOffset = FirstBaseline.leadingOffset;    var myText = myTextFrame.parentStory.paragraphs.item(0);    myText.pointSize = 5;    myText.appliedFont = app.fonts.item("Courier New");				}function createTitle(myTitle, jobTitle) {    var myDocument = app.documents.item(0);    var myPage = myDocument.pages.item(0);    var today = new Date();    var dd = today.getDate();    var mm = today.getMonth()+1;    var yyyy = today.getFullYear();    if(dd<10) {        dd='0'+dd    }     if(mm<10) {        mm='0'+mm    }     today = dd+'/'+mm+'/'+yyyy;    var myTextFrame = myPage.textFrames.add(myDocument.layers.item(-1), undefined, undefined,{geometricBounds:[36, 36, 75, 555], contents:myTitle}); 	myTextFrame.textFramePreferences.firstBaselineOffset = FirstBaseline.leadingOffset;    var myText = myTextFrame.parentStory.paragraphs.item(0);    myText.pointSize = 24;    myText.appliedFont = app.fonts.item("Courier New");    myTextFrame = myPage.textFrames.add(myDocument.layers.item(-1), undefined, undefined,{geometricBounds:[200, 36, 75, 555], contents:(jobTitle + "\nReport Generated: " + today)}); 	myTextFrame.textFramePreferences.firstBaselineOffset = FirstBaseline.leadingOffset;    var myText = myTextFrame.parentStory.paragraphs.item(0);    myText.pointSize = 12;    myText.appliedFont = app.fonts.item("Courier New");}